#!/usr/bin/env python3
"""
Converts a binary file to Verilog memory initialization format
for use with the Vigna RISC-V processor testbenches.
"""

import sys
import argparse

def bin_to_verilog_mem(input_file, output_file, base_addr=0, format_type="readmemh"):
    """Convert binary file to Verilog memory format."""
    try:
        with open(input_file, 'rb') as f:
            data = f.read()
        
        # Pad to 4-byte boundary
        while len(data) % 4 != 0:
            data += b'\x00'
        
        with open(output_file, 'w') as f:
            f.write("// Verilog memory initialization from: {}\n".format(input_file))
            f.write("// Generated by bin_to_verilog_mem.py\n")
            f.write("// Base address: 0x{:08x}\n".format(base_addr))
            f.write("// Format: {}\n\n".format(format_type))
            
            if format_type == "readmemh":
                # Write memory initialization in $readmemh format
                addr = base_addr
                for i in range(0, len(data), 4):
                    # Extract 4 bytes (little-endian)
                    word = 0
                    for j in range(4):
                        if i + j < len(data):
                            word |= data[i + j] << (j * 8)
                    
                    f.write("{:08x}\n".format(word))
                    addr += 4
                f.write("// End of program ({} bytes, {} words)\n".format(len(data), len(data) // 4))
            
            elif format_type == "assignments":
                # Write memory initialization as assignment statements
                addr = base_addr
                for i in range(0, len(data), 4):
                    # Extract 4 bytes (little-endian)
                    word = 0
                    for j in range(4):
                        if i + j < len(data):
                            word |= data[i + j] << (j * 8)
                    
                    f.write("        instruction_memory[{:3d}] = 32'h{:08x};\n".format(addr // 4, word))
                    addr += 4
                f.write("        // End of program ({} bytes, {} words)\n".format(len(data), len(data) // 4))
        
        print(f"Successfully converted {input_file} to {output_file}")
        print(f"Program size: {len(data)} bytes ({len(data)//4} words)")
        
    except FileNotFoundError:
        print(f"Error: File {input_file} not found")
        sys.exit(1)
    except Exception as e:
        print(f"Error: {e}")
        sys.exit(1)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Convert binary to Verilog memory format")
    parser.add_argument("input", help="Input binary file")
    parser.add_argument("output", help="Output Verilog file")
    parser.add_argument("--base-addr", type=lambda x: int(x,0), default=0, 
                       help="Base address (default: 0)")
    parser.add_argument("--format", choices=["readmemh", "assignments"], default="readmemh",
                       help="Output format (default: readmemh)")
    
    args = parser.parse_args()
    bin_to_verilog_mem(args.input, args.output, args.base_addr, args.format)